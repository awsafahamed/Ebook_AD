@model List<Book>

@{
    ViewData["Title"] = "Books";
}
<section id="hero" class="d-flex align-items-center">
    <div class="container text-center">
        <h1>Discover Your Next Adventure</h1>
        <h3 data-aos="fade-up">
            Explore our extensive collection of eBooks and find your new favorite.
        </h3>
    </div>
</section>

<div class="container mt-5">
    <h1 class="text-center">@ViewData["Title"]</h1>
    <hr />

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <input type="text" id="searchInput" class="form-control" placeholder="Search by title..." onkeyup="filterBooks()" />
        </div>
        <div class="col-md-4">
            <select id="categoryFilter" class="form-select" onchange="filterBooks()">
                <option value="">Filter by category</option>
                <option value="Fiction">Fiction</option>
                <option value="Non-Fiction">Non-Fiction</option>
                <option value="Biography">Biography</option>
                <option value="Science">Science</option>
            </select>
        </div>
    </div>

    <!-- Books List -->
    <div class="row" id="book-container">
        @foreach (var book in Model)
        {
            <div class="col-md-3 mb-4 book-card" data-category="@book.Category" data-title="@book.Title.ToLowerInvariant()">
                <div class="card-book-main  h-100">
                    <div class="card-book">
                        @if (!string.IsNullOrEmpty(book.ImageUrl))
                        {
                            <img src="@book.ImageUrl" alt="@book.Title" class="img-fluid" />
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center" style="height: 400px; background: #f8f9fa;">
                                <span>No Image</span>
                            </div>
                        }
                    </div>
                    <div class="card-content">
                        <h5 class="card-title">@book.Title</h5>
                        <p class="mb-1">Author: @book.Author</p>
                 
                    </div>
                    <div class="card-price">
                        
                        <p class="mb-1">Price: Rs.@book.Price</p>
                        <a href="@Url.Action("Details", "Home", new { id = book.BookId })" class="btn btn-outline-secondary btn-sm">View Details</a>
                        <a class="btn btn-primary btn-cart"
                           data-book-id="@book.BookId"
                           data-quantity="1">
                            <i class="bi bi-bag"></i> Add to Cart
                        </a>


                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    function filterBooks() {
        const searchInput = document.getElementById('searchInput').value.toLowerCase();
        const categoryFilter = document.getElementById('categoryFilter').value;
        const books = document.querySelectorAll('.book-card');

        books.forEach(book => {
            const title = book.getAttribute('data-title');
            const category = book.getAttribute('data-category');

            const matchesSearch = title.includes(searchInput);
            const matchesCategory = categoryFilter === '' || category === categoryFilter;

            if (matchesSearch && matchesCategory) {
                book.style.display = 'block';
            } else {
                book.style.display = 'none';
            }
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        // Add click event listener to all Add to Cart buttons
        document.querySelectorAll(".btn-cart").forEach(function (button) {
            button.addEventListener("click", function (e) {
                e.preventDefault(); // Prevent the default action

                // Get book ID and quantity
                const bookId = this.getAttribute("data-book-id");
                const quantity = this.getAttribute("data-quantity");

                // Send AJAX request
                fetch(`/Cart/AddToCart?bookId=${bookId}&quantity=${quantity}`, {
                    method: "POST",
                    headers: {
                        "X-Requested-With": "XMLHttpRequest",
                        "Content-Type": "application/json",
                    },
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Network response was not ok");
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            alert("Item added to cart!");
                            // Optionally, update cart UI here
                        } else {
                            alert("Failed to add item to cart.");
                        }
                    })
                    .catch(error => {
                        console.error("There was a problem with the fetch operation:", error);
                        alert("An error occurred. Please try again.");
                    });
            });
        });
    });

</script>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        color: #333;
    }

    #hero {
        background: linear-gradient(to right, #ffb328, #ff8533);
        color: white;
        padding: 60px 0;
    }

        #hero h1, #hero h3 {
            margin: 0;
        }

    .card-book {
        text-align: left;
    }

    .card-content {
        text-align: left;
        color: #000;
        font-weight: 600;
    }

        .card-content h5 {
            font-size: 16px;
        }

        .card-content p {
            font-size: 14px;
        }

    .card-price {
        text-align: left;
        color: #000;
        font-weight: 600;
    }

    #searchInput, #categoryFilter {
        border-radius: 20px;
        padding: 10px;
    }
</style>
